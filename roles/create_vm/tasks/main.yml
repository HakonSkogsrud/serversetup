---

- name: Ensure Python 3 and venv are installed (if running on PVE node)
  ansible.builtin.package:
    name:
      - python3
      - python3-venv
    state: present
  become: true
  when: inventory_hostname == "{{ node }}"

- name: Create a Python virtual environment for Ansible (if running on PVE node)
  ansible.builtin.command:
    cmd: python3 -m venv /opt/ansible_venv
    creates: /opt/ansible_venv
  become: true
  when: inventory_hostname == "{{ node }}"

- name: Ensure proxmoxer and requests libraries are installed in the venv (if running on PVE node)
  ansible.builtin.command:
    cmd: /opt/ansible_venv/bin/pip install proxmoxer requests
    creates: /opt/ansible_venv/lib/python3.*/site-packages/proxmoxer
  become: true
  when: inventory_hostname == "{{ node }}"

- name: Set the Python interpreter (if running on PVE node)
  set_fact:
    ansible_python_interpreter: /opt/ansible_venv/bin/python3
  when: inventory_hostname == "{{ node }}"

# --- Task to Clone (initial creation) ---
- name: Clone VM (initial creation if needed)
  community.general.proxmox_kvm:
    # --- Connection ---
    api_host: "{{ server_ips.proxmox }}"
    api_user: "{{ api_user }}"
    api_token_id: "{{ api_token_id }}"
    api_token_secret: "{{ pve_api_token_secret }}"
    node: "{{ node }}"

    # --- Clone Operation ---
    clone: "{{ clone }}"
    vmid: "{{ vmid }}"             
    name: "{{ name }}"
    newid: "{{ newid }}"  
    full: yes                 

    state: present


# --- Task to ensure configuration 
- name: Ensure VM configuration is correct
  community.general.proxmox_kvm:
    # --- Connection ---
    api_host: "{{ server_ips.proxmox }}"
    api_user: "{{ api_user }}"
    api_token_id: "{{ api_token_id }}"
    api_token_secret: "{{ pve_api_token_secret }}"
    node: "{{ node }}"

    # --- Target VM --
    vmid: "{{ newid }}" 
    state: present            
    update: true             

    # --- Desired Configuration ---
    description: "Fileserver VM created and configured with Ansible" # Can update description
    balloon: "{{ balloon }}"
    cores: "{{ cores }}"
    memory: "{{ memory }}"
    sockets: "{{ sockets }}"
    onboot: true # Ensure it starts with the node
    sshkeys: "{{ vm_public_ssh_keys }}"

# --- Task to resize the primary disk ---
- name: Resize the primary disk of the VM to {{ primary_disk_size }}
  ansible.builtin.command:
    cmd: "qm resize {{ newid }} {{ primary_disk_name }} {{ primary_disk_size }}"
  changed_when: true

# --- Task to add virtiofs0 using qm set ---
- name: Set virtiofs0 configuration using qm command
  ansible.builtin.command:
    cmd: "qm set {{ newid }} --virtiofs0 ''{{ virtiofs_tag }}''"
  changed_when: true

# --- Task to Change IP configuration using qm set ---
- name: Change IP configuration using qm command
  ansible.builtin.command:
    cmd: "qm set {{ newid }} --ipconfig0 ip='{{ ipaddr }}'/24,gw='{{ gateway }}'"
  changed_when: true


- name: Check VM status
  ansible.builtin.command:
    cmd: "qm status {{ newid }}"
  register: vm_status
  changed_when: false
  ignore_errors: true # Ignore errors if VM doesn't exist yet

- name: Start the VM if not running
  ansible.builtin.command:
    cmd: "qm start {{ newid }}"
  when: vm_status.rc != 0 or vm_status.stdout | default('') is search("stopped", ignorecase=True)
  changed_when: true

- name: Wait for VM to start
  ansible.builtin.pause:
    seconds: 10
  when: vm_status.rc != 0 or vm_status.stdout | default('') is search("stopped", ignorecase=True)