---
- name: Clone and Configure Proxmox VM for immich vm
  hosts: proxmox
  gather_facts: false
  vars_files:
    - ../common/secrets.yml
  vars:
    target_vmid: 4001  # Define the target VM ID as a variable
    primary_disk_name: scsi0   # Corrected: This is the primary disk of your template
    primary_disk_size: 100G    # Desired disk size
  tasks:
    # --- venv tasks remain the same ---
    - name: Ensure Python 3 and venv are installed (if running on PVE node)
      ansible.builtin.package:
        name:
          - python3
          - python3-venv
        state: present
      become: true
      when: inventory_hostname == 'proxmox'

    - name: Create a Python virtual environment for Ansible (if running on PVE node)
      ansible.builtin.command:
        cmd: python3 -m venv /opt/ansible_venv
        creates: /opt/ansible_venv
      become: true
      when: inventory_hostname == 'proxmox'

    - name: Ensure proxmoxer and requests libraries are installed in the venv (if running on PVE node)
      ansible.builtin.command:
        cmd: /opt/ansible_venv/bin/pip install proxmoxer requests
        creates: /opt/ansible_venv/lib/python3.*/site-packages/proxmoxer
      become: true
      when: inventory_hostname == 'proxmox'

    - name: Set the Python interpreter (if running on PVE node)
      set_fact:
        ansible_python_interpreter: /opt/ansible_venv/bin/python3
      when: inventory_hostname == 'proxmox'

    # --- Task to Clone (initial creation) ---
    - name: Clone VM (initial creation if needed)
      community.general.proxmox_kvm:
        # --- Connection ---
        api_host: 10.0.0.41
        api_user: root@pam
        api_token_id: ansible-automation
        api_token_secret: "{{ pve_api_token_secret }}"
        node: proxmox

        # --- Clone Operation ---
        clone: "alma-cloud-template-automated"
        vmid: 9003             
        name: "immich"
        newid: "{{ target_vmid }}"  
        full: yes                 

        state: present     


    # --- Task to ensure configuration 
    - name: Ensure VM configuration is correct
      community.general.proxmox_kvm:
        # --- Connection ---
        api_host: 10.0.0.41
        api_user: root@pam
        api_token_id: ansible-automation
        api_token_secret: "{{ pve_api_token_secret }}"
        node: proxmox # Or discover automatically if not cloning here

        # --- Target VM ---
        vmid: "{{ target_vmid }}" # Target the VM by its ID
        state: present            # Ensure VM exists (this task won't create, just check)
        update: true              # <-- Use update: true here!

        # --- Desired Configuration ---
        description: "Fileserver VM created and configured with Ansible" # Can update description
        balloon: 4000
        cores: 4
        memory: 20096
        sockets: 1
        onboot: true # Ensure it starts with the node

    # --- Task to resize the primary disk ---
    - name: Resize the primary disk of the VM to {{ primary_disk_size }}
      ansible.builtin.command:
        cmd: "qm resize {{ target_vmid }} {{ primary_disk_name }} {{ primary_disk_size }}"
      changed_when: true
      # This command resizes the block device. Filesystem expansion within the OS may be needed separately.

    # --- Task to add virtiofs0 using qm set ---
    - name: Set virtiofs0 configuration using qm command
      ansible.builtin.command:
        cmd: "qm set {{ target_vmid }} --virtiofs0 'immich'"
      changed_when: true

    # --- Task to Change IP configuration using qm set ---
    # Using qm set here is fine, alternative is using 'net' and 'ipconfig' with update: true in the second proxmox_kvm task.
    - name: Change IP configuration using qm command
      ansible.builtin.command:
        cmd: "qm set {{ target_vmid }} --ipconfig0 ip=10.0.0.42/24,gw=10.0.0.138"
      changed_when: true


    - name: Check VM status
      ansible.builtin.command:
        cmd: "qm status {{ target_vmid }}"
      register: vm_status
      changed_when: false
      ignore_errors: true # Ignore errors if VM doesn't exist yet

    - name: Start the VM if not running
      ansible.builtin.command:
        cmd: "qm start {{ target_vmid }}"
      # Check rc != 0 or if stdout contains "stopped" (case-insensitive check)
      when: vm_status.rc != 0 or vm_status.stdout | default('') is search("stopped", ignorecase=True)
      changed_when: true

    - name: Wait for VM to start
      ansible.builtin.pause:
        seconds: 10
      # Only pause if the start command was potentially run
      when: vm_status.rc != 0 or vm_status.stdout | default('') is search("stopped", ignorecase=True)