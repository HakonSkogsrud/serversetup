---
- name: Setup Immich
  hosts: immich
  become: true
  vars:
    immich_project_dir: /home/haaksk/immich-app


  tasks:
    - name: Ensure immich-app directory exists
      file:
        path: "{{ immich_project_dir }}"
        state: directory
        owner: haaksk
        group: docker
        mode: '0755'

    - name: Copy environment file
      copy:
        src: /mnt/storage/immich/.env
        dest: /home/haaksk/immich-app/.env
        remote_src: true
        owner: haaksk
        group: docker
        mode: '0644'
        backup: yes

    - name: Download latest docker-compose.yml
      get_url:
        url: https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
        dest: /home/haaksk/immich-app/docker-compose.yml
        owner: haaksk
        group: docker
        mode: '0644'
        force: no
      register: compose_download

    - name: Pull latest images and ensure services are created (will also start them)
      community.docker.docker_compose_v2:
        project_src: "{{ immich_project_dir }}"
        pull: "always"  # Corresponds to 'docker compose pull'. 'always' ensures latest images.
        state: present  # Corresponds to 'docker compose up'. This will create and start services.
      tags:
        - immich_deploy

    - name: Ensure the Immich database service (PostgreSQL) is specifically running
      community.docker.docker_compose_v2:
        project_src: "{{ immich_project_dir }}"
        state: present
        services:
          - database # Corrected: Use the SERVICE name from docker-compose.yml
      register: postgres_service_status
      tags:
        - immich_deploy

    - name: Pause for 10 seconds to allow PostgreSQL to initialize
      ansible.builtin.pause:
        seconds: 10
      when: postgres_service_status is changed or "'immich_postgres' in (postgres_service_status.actions | map(attribute='service') | list)" # Optionally, only pause if postgres was just started/restarted
      tags:
        - immich_deploy

    - name: Find the latest Immich DB backup file path
      ansible.builtin.shell:
        cmd: "ls -1 /mnt/storage/immich/library/backups/immich-db-backup-*.sql.gz | sort -V | tail -n 1"
      become: true # If sudo is needed to list files in this directory
      register: latest_backup_file_info
      changed_when: false # This command doesn't change system state
      check_mode: false # Allow this to run in check mode for subsequent tasks
      tags:
        - immich_restore
        - immich_deploy

    - name: Show found backup file
      ansible.builtin.debug:
        msg: "Latest backup file found: {{ latest_backup_file_info.stdout }}"
      when: latest_backup_file_info.stdout is defined and latest_backup_file_info.stdout != ""
      tags:
        - immich_restore
        - immich_deploy

    - name: Restore Immich database from the latest backup
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          gunzip --stdout "{{ latest_backup_file_info.stdout }}" | \
          sed "s/SELECT pg_catalog.set_config('search_path', '', false);/SELECT pg_catalog.set_config('search_path', 'public, pg_catalog', true);/g" | \
          docker exec -i immich_postgres psql --dbname=postgres --username=postgres
      become: true # If sudo is needed for gunzip or docker exec
      when: latest_backup_file_info.stdout is defined and latest_backup_file_info.stdout != ""
      args:
        executable: /bin/bash # Ensures set -o pipefail is available if default shell differs
      register: db_restore_status
      changed_when: db_restore_status.rc == 0 # Consider it a change if the command runs successfully
      failed_when: db_restore_status.rc != 0 and "No such file or directory" not in db_restore_status.stderr and "no files found" not in db_restore_status.stderr # Don't fail if backup file not found initially, but fail on other errors
      tags:
        - immich_restore
        - immich_deploy

    - name: Ensure all services in Docker Compose project are up and running
      community.docker.docker_compose_v2:
        project_src: "{{ immich_project_dir }}"
        state: present # Ensures all services are (re)created if needed and started. Equivalent to 'docker compose up -d'.
      tags:
        - immich_deploy