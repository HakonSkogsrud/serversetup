---
- name: Setup Monitoring Server (AlmaLinux)
  hosts: monitoring_server
  become: true
  vars:
    docker_compose_version: "v2.27.0" # Specify a recent version
    monitoring_dir: "/opt/monitoring"

  tasks:
    - name: Add Docker CE repository
      ansible.builtin.command:
        cmd: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        creates: /etc/yum.repos.d/docker-ce.repo
      changed_when: true

    - name: Install Docker packages
      ansible.builtin.dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Ensure docker service is running and enabled
      ansible.builtin.systemd_service:
        name: docker
        state: started
        enabled: true

    - name: Create monitoring directory
      ansible.builtin.file:
        path: "{{ monitoring_dir }}"
        state: directory
        mode: '0755'

    - name: Copy docker-compose.yml
      ansible.builtin.copy:
        src: files/docker-compose.yml
        dest: "{{ monitoring_dir }}/docker-compose.yml"
        mode: '0644'

    - name: Generate prometheus.yml from template
      ansible.builtin.template:
        src: templates/prometheus.yml.j2
        dest: "{{ monitoring_dir }}/prometheus.yml"
        mode: '0644'

    - name: Start Prometheus and Grafana containers
      community.general.docker_compose:
        project_src: "{{ monitoring_dir }}"
        state: present # Ensures containers are created/started and updated if config changes


- name: Setup Proxmox Host Exporters (Debian)
  hosts: proxmox_hosts
  become: true
  vars:
    proxmox_exporter_version: "v1.4.1" # Check latest release on GitHub
    proxmox_exporter_url: "https://github.com/danielrbradley/proxmox-exporter/releases/download/{{ proxmox_exporter_version }}/proxmox-exporter-linux-amd64"
    proxmox_exporter_dest: "/usr/local/bin/proxmox-exporter"

  tasks:
    - name: Update apt cache (required before package installation)
      ansible.builtin.apt:
        update_cache: true

    - name: Install node_exporter
      ansible.builtin.apt:
        name: prometheus-node-exporter
        state: present

    # --- Configure node_exporter to enable systemd and smartctl collectors ---
    # Using a systemd drop-in file is best practice
    - name: Create systemd drop-in directory for node_exporter
      ansible.builtin.file:
        path: /etc/systemd/system/prometheus-node-exporter.service.d
        state: directory
        mode: '0755'

    - name: Create node_exporter drop-in file to enable collectors
      ansible.builtin.blockinfile:
        path: /etc/systemd/system/prometheus-node-exporter.service.d/override.conf
        create: true
        mode: '0644'
        block: |
          [Service]
          ExecStart=
          ExecStart=/usr/sbin/prometheus-node-exporter --web.listen-address=:9100 --collector.systemd --collector.smartctl --collector.smartctl.collector-path=/usr/sbin/smartctl
        marker: "# {mark} ANSIBLE GENERATED - NODE_EXPORTER COLLECTORS"

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Restart node_exporter service
      ansible.builtin.systemd_service:
        name: prometheus-node-exporter
        state: restarted
        enabled: true

    # --- Install proxmox-exporter ---
    # Download the binary
    - name: Download proxmox-exporter binary
      ansible.builtin.get_url:
        url: "{{ proxmox_exporter_url }}"
        dest: "{{ proxmox_exporter_dest }}"
        mode: '0755' # Make it executable

    # Create a systemd service file for proxmox-exporter
    - name: Create proxmox-exporter systemd service file
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Proxmox Exporter
          Wants=network-online.target
          After=network-online.target

          [Service]
          Type=simple
          User=nobody # Or create a dedicated user
          Group=nogroup # Or create a dedicated group
          ExecStart={{ proxmox_exporter_dest }} --web.listen-address=":9221" --proxmox.api-url="https://localhost:8006" --proxmox.verify-ssl=false # Adjust verify-ssl for production!
          Restart=always

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/proxmox-exporter.service
        mode: '0644'

    - name: Reload systemd daemon (after adding new service file)
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Start and enable proxmox-exporter service
      ansible.builtin.systemd_service:
        name: proxmox-exporter
        state: started
        enabled: true

- name: Setup Monitored VM Exporters (AlmaLinux)
  hosts: monitored_vms
  become: true

  tasks:
    - name: Install required packages for Docker (AlmaLinux)
      ansible.builtin.dnf:
        name:
          - dnf-utils
          - http://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/Packages/containerd.io-1.6.28-3.5.el9.x86_64.rpm # Example specific version if needed, or use official repo
          # Better: Use official Docker repo
          # - "dnf-plugins-core"
        state: present
        disable_gpg_check: true # May be needed for containerd.io depending on source

    - name: Add Docker repository (AlmaLinux)
      ansible.builtin.shell: |
        sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      args:
        creates: /etc/yum.repos.d/docker-ce.repo # Prevent running if repo already exists

    - name: Install Docker Engine (AlmaLinux)
      ansible.builtin.dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Ensure docker service is running and enabled
      ansible.builtin.systemd_service:
        name: docker
        state: started
        enabled: true

    - name: Install node_exporter (AlmaLinux)
      ansible.builtin.dnf:
        name: prometheus-node-exporter
        state: present

    # node_exporter on AlmaLinux typically has the systemd collector enabled by default
    # No need for a drop-in unless you need to add other collectors

    - name: Ensure node_exporter service is running and enabled
      ansible.builtin.systemd_service:
        name: prometheus-node-exporter
        state: started
        enabled: true

    - name: Deploy cAdvisor container
      community.general.docker_container:
        name: cadvisor
        image: gcr.io/cadvisor/cadvisor:latest
        ports:
          - "8080:8080"
        volumes:
          - /:/rootfs:ro
          - /var/run:/var/run:ro
          - /sys:/sys:ro
          - /var/lib/docker/:/var/lib/docker:ro
          - /dev/disk/:/dev/disk:ro
        privileged: yes # cAdvisor often requires privileged mode for full access
        state: started
        restart_policy: always

# Optional: Play to configure Grafana Data Source automatically
# Requires Grafana API key or admin credentials
# - name: Configure Grafana Data Source
#   hosts: monitoring_server
#   tasks:
#     - name: Add Prometheus data source to Grafana
#       community.grafana.grafana_datasource:
#         url: http://localhost:3000 # Accessible from the Grafana container
#         name: Prometheus
#         type: prometheus
#         access_mode: proxy
#         prometheus:
#           url: http://prometheus:9090 # Service name within docker-compose network
#         auth_basic:
#           enabled: true
#           user: admin
#           password: <your_grafana_admin_password> # Change this! Or use an API key
#         validate_certs: false
#         state: present

# Optional: Play to import Grafana Dashboards automatically
# Requires Grafana API key or admin credentials
# - name: Import Grafana Dashboards
#   hosts: monitoring_server
#   tasks:
#     - name: Import Node Exporter Full dashboard
#       community.grafana.grafana_dashboard:
#         url: http://localhost:3000
#         dashboard_id: 1860 # Node Exporter Full ID
#         overwrite: true
#         auth_basic:
#           enabled: true
#           user: admin
#           password: <your_grafana_admin_password>
#     - name: Import cAdvisor dashboard
#       community.grafana.grafana_dashboard:
#         url: http://localhost:3000
#         dashboard_id: 1421 # cAdvisor ID
#         overwrite: true
#         auth_basic:
#           enabled: true
#           user: admin
#           password: <your_grafana_admin_password>
#     # Add more dashboards as needed (Proxmox, etc.)